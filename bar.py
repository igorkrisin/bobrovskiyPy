1.
до://////////////////////
while (true) {
char answer;
 #...код...#
cin >> answer;
if (answer == 'y') {
#...код...#
после://////////////////
while (true) {
 #...код...#
char answer;
cin >> answer;
if (answer == 'y') {
#...код...#

//переместил переменную хранящую символ непосредственно к месту ее использования
//уменьшил окно уязвимости и улучшил читаемость кода

2.
до://///////////////////////
#...код...#
    int x = 0;
    int y = 0;
#...код...#
main(){
    while(1){
        x = napr_x+x;
        y = napr_y+y;
#...код...#
}

после://////////////////////
#...код...#
main(){
    int x = 0;
    int y = 0;
    while(1){
        x = napr_x+x;
        y = napr_y+y;
}
#...код...#

//переместил глобальную переменную в главную функцию пронраммы, сделав ее локальной, это возможно
//в связи с тем что до функции main она нигде не используется и может инициализироваться непосредственно в ней
//уменьшил окно уязвимости повысиля читаемость кода

3.
до://///////////////////////
#...код...#
    int speed;
#...код...#
main(){
#...код...#
    speed = 5;
    halfdelay(speed);
#...код...#

после://///////////////////
main(){
#...код...#
    const int SPEED_SNAKE_MS = 5;
    halfdelay(SPEED_SNAKE_MS);
#...код...#


//убрал определениепересенно как глобальной, перенес ее определение непосрественно в главный цикл
//седлал переменную константой
//обезопасил от изменения данной информации
//уменьшил окно уязвимости

4
до:////////////////////
#...код...#
int napr_x;
int napr_y;
#...код...#
int main()
{
    napr_x = 1;
    napr_y = 0;
    #...код...#

после://////////////////
# ...код...#
int main()
{
    int DIRECTION_MOVE_X_SNAKE = 0;
    int DIRECTION_MOVE_Y_SNAKE = 0;
    # ...код...#
//переместил переменную в main, сделал константой,
//дал понятное название(переменная больше нигде не используется)
//уменьшил окно уязвимости
//улучшил читаемость кода

5.
до://////////////////////
#...код...#
color currentColor = white;
#...код...#
Matrix<Pieces> &movePlayer(Matrix<Pieces> &board, color colors){
#...код...#
    while(true) {

        cout << "enter the coordinats in the format 2b2c" << endl << "now move for "; colors == white? cout << "white :":cout <<"black :";
        cin >> coord;
        cout << "coord: " << coord << endl;
        colors = currentColor;
#...код...#
после:////////////////
#...код...#
color currentColor = white;
Matrix<Pieces> &movePlayer(Matrix<Pieces> &board, color colors){
#...код...#
    while(true) {

        cout << "enter the coordinats in the format 2b2c" << endl << "now move for "; colors == white? cout << "white :":cout <<"black :";
        cin >> coord;
        cout << "coord: " << coord << endl;
        colors = currentColor;
#...код...#

//перенес глобальную переменную непосрелственно к месту ее использования
//тем самым улучшил читабельность кода и сократил время жизни переменной
//уменьшил окно уязвимости

6.
до://///////////////////////
    vector<int> allEval;
    #...код...#
    for (int i = 0; i < (int)everyMove.size(); i++) {
        # ...код...#
        allEval.push_back(evalMove(newBoard,depth-1,swapColor(colors)));

после:////////////////////////
    #...код...#
    vector<int> allEval;
    for (int i = 0; i < (int)everyMove.size(); i++) {
        # ...код...#
        allEval.push_back(evalMove(newBoard,depth-1,swapColor(colors)));

//перенес переменную непосредственно к циклу, где она применяется
//тем самым улучшил читабельность кода и сократил время жизни переменной
//уменьшил окно уязвимости

7.
#...код...#
до://///////////////////////
    int threatMap[64] = {
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0
    };
    #...код...#
void threatKnight(int y, int x, int threatMap[64], piece board[64]) {

после:///////////////////////////
#...код...#
int threatMap[64] = {
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0
    };
void threatKnight(int y, int x, int threatMap[64], piece board[64]) {

//переместил к месту использования переменной
//сузил окно уязвимости и лонически понятен код лучше за счет расположения
/переменной ближе к месту использования

8.
до://///////////////
int integer;
int zaim = 0;
while (strlen(num1) != strlen(num2)){
#...код...#

for (int i = strlen(num1) - 1; i >= 0; --i){
    integer = (num1[i] - 48) - (num2[i] - 48) - zaim;
    #...код...#
}
после:///////////////////////
int zaim = 0;
while (strlen(num1) != strlen(num2)){
#...код...#

for (int i = strlen(num1) - 1; i >= 0; --i){
    int integer = (num1[i] - 48) - (num2[i] - 48) - zaim;
    #...код...#
}

//нашел неинициализированную переменную место инициализации - удалил
//инициализировал там, где впервые применяется переменная сузил область видимости переменной
//уменьшил окно уязвимости

9.
до://////////////////////
#...код...#
int* coord_x;
#...код...#
void add_arr(int x, int y){
    #...код...#
    coord_x[begining] = x;

после:///////////
#...код...#
int* coord_x;
void add_arr(int x, int y){
    #...код...#
    coord_x[begining] = x;
//перенес перемеенную к месте ее непосредственного использования
//уменьшил окно уязвимости и улучшил читаемость кодв

10.
до://///////////////
#...код...#
int bar=0;
#...код...#
void del_arr(){
    if (--bar<0)
	bar = size_sn -1;
    }
    #...код...#
после://////////////////
#...код...#
int bar=0;
void del_arr(){
    if (--bar<0)
	bar = size_sn -1;
    }
    #...код...#

//перенес переменную ближе к месту ее вызова
//улучшил читаемость кода, уменьшил окно уязвимости

11.
до:////////////////////
int begining;
#...код...#
void add_arr(int x, int y){
#...код...#
if (--begining < 0)
{
    begining = size_sn - 1;
}
#...код...#
после:////////////////////
int begining;
void add_arr(int x, int y){
#...код...#
if (--begining < 0)
{
    begining = size_sn - 1;
}
#...код...#

//перенес переменную ближе к месту ее повторного вызова
//уменьшил окно уязвимости

12
до://///////////////////
#...код...#
func getDown(matrix [][]int) [][]int {
    var count int
        for true {
            count = 0
            #...код...#
после:////////////////////
#...код...#
func getDown(matrix [][]int) [][]int {
        for true {
            var count int := 0
            #...код...#

//удалил созданную, но неинициализированную переменную
// инициализировал ее сразу в меcnt использования
//уменьщил ее область видимости

13.
до://///////////////////////
#...код...#
enum  pieces {king, queen, bishop, knight, rook, pawn, Empty};
#...код...#
class Pieces {

public:

    pieces name_piece;
    #...код...#
после://///////////////////////
#...код...#
enum  pieces {king, queen, bishop, knight, rook, pawn, Empty};
class Pieces {

public:

    pieces name_piece;
    #...код...#

//перенес enum ближе к классу где он использкнтя - облегчил читаемость кода

14.
до://///////////////////
#...код...#
Matrix < Pieces > & movePlayer(Matrix < Pieces > & board, color colors){
    string coord;
    int xDep = 0, ...#...код...#
    if(regex_match(coord, r)){
        xDep = coord[0]-48-1;
после:///////////////
#...код...#
Matrix < Pieces > & movePlayer(Matrix < Pieces > & board, color colors){
    string coord;
    #...код...#
    int xDep = 0, ...
    if(regex_match(coord, r)){
        xDep = coord[0]-48-1;

// перенес переменную ближе к коду в которой она применяется- сделал меньше окно уязвимости
// улучшил читаемость кода

15.
до:///////////////
    #...код...#
    int xArr = 0;
    #...код...#
    static const regex r("[1-8][a-h][1-8][a-h]");
        #...код...#
            xArr  = coord[2]-48-1;
            #...код...#
после://///////////////
#...код...#
    int xArr = 0;
    static const regex r("[1-8][a-h][1-8][a-h]");
        #...код...#
            xArr  = coord[2]-48-1;
            #...код...#

//перенес переменную непосрелственно к месту выполенения кода улучшил читаемость кода и уменьшил окно уязвимости








